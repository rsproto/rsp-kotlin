package org.timemates.rsp.client

import io.rsocket.kotlin.RSocket
import org.timemates.rsp.annotations.ExperimentalInterceptorsApi
import org.timemates.rsp.interceptors.Interceptors
import org.timemates.rsp.interceptors.Interceptor
import org.timemates.rsp.pipeline.PipelineContext
import kotlin.properties.Delegates

/**
 * The abstraction for the clients that are generated by `rsproto`.
 */
@OptIn(ExperimentalInterceptorsApi::class)
public abstract class RSPServiceApi(
    protected val rsocket: RSocket,
    protected val interceptors: Interceptors
) {
    /**
     * An experimental API for building instances of [RSPServiceApi] with interceptors.
     * This API is subject to change or removal in future versions.
     */
    @OptIn(ExperimentalInterceptorsApi::class)
    public abstract class Builder<T : RSPServiceApi>(
        private val constructor: (RSocket, Interceptors) -> T
    ) {
        /** List of interceptors for request processing */
        private val requestInterceptors: MutableList<Interceptor.Request> = mutableListOf()

        /** List of interceptors for response processing */
        private val responseInterceptors: MutableList<Interceptor.Response> = mutableListOf()

        /** The RSocket instance to use */
        private var rsocket: RSocket by Delegates.notNull()

        /**
         * Adds a list of interceptors for processing requests.
         * @param interceptors List of request interceptors to add.
         * @return This builder instance.
         */
        @ExperimentalInterceptorsApi
        public fun requestInterceptors(interceptors: List<Interceptor.Request>): Builder<T> = apply {
            this.requestInterceptors += interceptors
        }

        /**
         * Adds one or more interceptors for processing requests.
         * @param interceptors One or more request interceptors to add.
         * @return This builder instance.
         */
        @ExperimentalInterceptorsApi
        public fun requestInterceptors(vararg interceptors: Interceptor.Request): Builder<T> = apply {
            this.requestInterceptors += interceptors
        }

        /**
         * Adds an interceptor for processing requests.
         * @param interceptor The request interceptor to add.
         * @return This builder instance.
         */
        @ExperimentalInterceptorsApi
        public fun requestInterceptor(interceptor: Interceptor.Request): Builder<T> = apply {
            this.requestInterceptors += interceptor
        }

        /**
         * Adds a list of interceptors for processing responses.
         * @param interceptors List of response interceptors to add.
         * @return This builder instance.
         */
        @ExperimentalInterceptorsApi
        public fun responseInterceptors(interceptors: List<Interceptor.Response>): Builder<T> = apply {
            this.responseInterceptors += interceptors
        }

        /**
         * Adds one or more interceptors for processing responses.
         * @param interceptors One or more response interceptors to add.
         * @return This builder instance.
         */
        @ExperimentalInterceptorsApi
        public fun responseInterceptors(vararg interceptors: Interceptor.Response): Builder<T> = apply {
            this.responseInterceptors += interceptors
        }

        /**
         * Adds an interceptor for processing responses.
         * @param interceptor The response interceptor to add.
         * @return This builder instance.
         */
        @ExperimentalInterceptorsApi
        public fun responseInterceptor(interceptor: Interceptor.Response): Builder<T> = apply {
            this.responseInterceptors += interceptor
        }

        /**
         * Sets the RSocket instance to use.
         * @param rsocket The RSocket instance.
         * @return This builder instance.
         */
        public fun rsocket(rsocket: RSocket): Builder<T> = apply {
            this.rsocket = rsocket
        }

        /**
         * Builds the final instance of [T] using the provided RSocket and interceptors.
         * @return The built instance of [T].
         */
        public fun build(): T {
            return constructor(rsocket, Interceptors(requestInterceptors, responseInterceptors))
        }
    }

    protected suspend fun <R : Any> interceptRequest(block: suspend (PipelineContext<R>) -> R): R {
        var state = PipelineContext(

        )

        if (interceptors.forRequests.isEmpty())
            return block()
    }
}